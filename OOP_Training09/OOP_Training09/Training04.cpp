#include <iostream>

class Parent { //부모클래스
    char* p;
public:
    Parent() {
        p = new char[10];
        std::cout << "Parent Constructor invocation" << std::endl; //생성자
    }
    virtual ~Parent() {
        delete[] p;
        std::cout << "Parent Destructor invocation" << std::endl; //소멸자
    }
};
class Child : public Parent { //부모클래스를 상속받은 자식클래스
    char* c;
public:
    Child() : Parent() {
        c = new char[10];
        std::cout << "Child Constructor invocation" << std::endl;
    }
    ~Child() {
        delete[] c;
        std::cout << "Child Destructor invocation" << std::endl;
    }
};
int main() {
    std::cout << "--- Case1: Normal Child instantiation ---" << std::endl;
    Child* c = new Child(); //자식 클래스 포인터
    delete c;

    std::cout << "--- Case2: Parent pointer to Child ---" << std::endl;

    Parent* p = new Child(); //부모 클래스 포인터
    delete p;

    getchar();
}